/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp ESC    &kp Q  &kp W  &kp E             &kp R     &kp T                                                                  &kp Y              &kp U          &kp I          &kp O    &kp P     &kp BSLH
&kp TAB    &kp A  &kp S  &kp D             &kp F     &kp G                                                                  &kp H              &kp J          &kp K          &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C             &kp V     &kp B             &kp LEFT_BRACKET  &trans  &trans  &kp RIGHT_BRACKET  &kp N              &kp M          &kp COMMA      &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                         &kp LEFT_CONTROL  &kp LALT  &kp LEFT_COMMAND  &kp SPACE         &mo 1   &mo 2   &kp RETURN         &kp RIGHT_COMMAND  &kp RIGHT_ALT  &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4     &kp NUMBER_5  &kp NUMBER_6                                  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans  &trans
&trans          &trans          &trans    &kp UP_ARROW           &trans        &trans                                        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans  &trans
&trans  &trans &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans       &trans  &trans  &trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans        &trans  &trans
                                                &trans           &trans        &trans        &trans  &trans  &trans  &trans  &kp NUMBER_0  &kp DOT       &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        layer_2 {
            bindings = <
&trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans                                  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans
&trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans                                  &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans
&trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans        &trans  &trans
                         &trans   &trans   &trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans
            >;
        };
    };
};
